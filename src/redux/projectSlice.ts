import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from './store';
import { fetchProject } from '../rest/litelabAPI';
import { Repo } from '../vcs/vcs';

export interface ProjectState {
  project: Repo | null;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: ProjectState = {
  project: null,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const get = createAsyncThunk(
  'project/fetch',
  async (name: string) => {
    const response = await fetchProject(name);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const projectSlice = createSlice({
  name: 'project',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    set: (state, action: PayloadAction<Repo>) => {
      state.project = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(get.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(get.fulfilled, (state, action) => {
        state.status = 'idle';
        state.project = action.payload;
      });
  },
});

export const { set } = projectSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProject = (state: RootState) => state.project.project;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectproject(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default projectSlice.reducer;
